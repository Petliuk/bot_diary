package com.example.bot_diary.pages_handler.comands;

import com.example.bot_diary.models.RegistrationRequest;
import com.example.bot_diary.models.User;
import com.example.bot_diary.models.UserStatus;
import com.example.bot_diary.pages_handler.comands.command_handler.MessageService;
import com.example.bot_diary.service.UserService;
import com.example.bot_diary.utilities.AdminButtons;
import com.example.bot_diary.utilities.ChecksForAccess;
import lombok.Builder;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;
import java.util.Optional;

@Component
@Builder
@Slf4j
public class AdminHandler {

    @Autowired
    private UserService userService;
    @Autowired
    private MessageService messageService;
    @Autowired
    private UserService userRepository;
    @Autowired
    private ChecksForAccess checksForAccess;

    private List<RegistrationRequest> pendingRequests;

    public void handleAdminCommands(Update update) throws TelegramApiException {
        if ("/b".equals(update.getMessage().getText()) && isAdmin(update.getMessage().getChatId())) {
            showUnconfirmedUsers(update.getMessage().getChatId());
        }
    }

    private boolean isAdmin(Long chatId) {
        return chatId.equals(712909082L);
    }
    public void processApplyRequest(Long chatId) {
        RegistrationRequest request = new RegistrationRequest(chatId);
        addPendingRequest(request); // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç —É —Å–ø–∏—Å–æ–∫ –æ—á—ñ–∫—É—é—á–∏—Ö
        messageService.sendMessage(chatId, "–í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."); // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    }
    public void addPendingRequest(RegistrationRequest request) {
        pendingRequests.add(request);
    }

    private void showUnconfirmedUsers(Long adminChatId) throws TelegramApiException {
        List<User> unconfirmedUsers = userService.findUsersByStatus(UserStatus.UNCONFIRMED);
        if (unconfirmedUsers.isEmpty()) {
            messageService.sendMessage(adminChatId, "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –Ω–µ–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.");
            return;
        }

        for (User user : unconfirmedUsers) {
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(adminChatId));
            message.setText("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: " + user.getFirstName() + " " + user.getLastName());
            message.setReplyMarkup(AdminButtons.getConfirmUserMarkup(user.getChatId()));
            messageService.sendMessage(message);
        }
    }

    void confirmUser(Long userId, Long adminChatId) {
        Optional<User> userOptional = userService.findUserByChatId(userId);
        userOptional.ifPresent(user -> {
            user.setStatus(UserStatus.CONFIRMED);
            userService.saveUser(user);

            messageService.sendMessage(adminChatId, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: " + user.getFirstName() + " " + user.getLastName());

            String userMessage = "üéâ –í–∞—à—É –∑–∞—è–≤–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n" +
                    "üÜì –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –ø—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 15 –¥–Ω—ñ–≤! –¶–µ —á—É–¥–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å —ñ–∑ —É—Å—ñ–º–∞ –π–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ —Ç–∞ –ø–µ—Ä–µ–≤–∞–≥–∞–º–∏.\n\n" +
                    "üí∞ –ü—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º —Å–∫–ª–∞–¥–∞—Ç–∏–º–µ 100 –≥—Ä–Ω –Ω–∞ –º—ñ—Å—è—Ü—å. –ú–∏ –∑–∞–≤—á–∞—Å–Ω–æ –Ω–∞–≥–∞–¥–∞—î–º–æ –≤–∞–º –ø—Ä–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –æ–ø–ª–∞—Ç–∏, —â–æ–± –≤–∏ –º–æ–≥–ª–∏ –±–µ–∑ –ø–µ—Ä–µ—Ä–≤ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –Ω–∞—à–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏.\n\n" +
                    "–î—è–∫—É—î–º–æ, —â–æ –≤–∏–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤—ñ—Å! –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.";
            messageService.sendMessage(userId, userMessage);
        });
    }

    public void processApplication(Long chatId, boolean accept, Update update) {
        Optional<User> userOptional = userService.findUserByChatId(chatId);
        userOptional.ifPresent(user -> {
            if (accept) {
                user.setStatus(UserStatus.CONFIRMED);
                userService.saveUser(user);
                messageService.sendMessage(chatId, "–í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.");
            } else {
                messageService.sendMessage(chatId, "–í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.");
            }
        });
    }

    public void handleListUsersCommand(Update update) throws TelegramApiException {
        List<User> confirmedUsers = userService.findUsersByStatus(UserStatus.CONFIRMED);
        Long adminChatId = update.getMessage().getChatId();

        for (User user : confirmedUsers) {
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(adminChatId));
            message.setText("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: " + user.getFirstName() + " " + user.getLastName());
            message.setReplyMarkup(AdminButtons.getUserListButtons(user.getChatId()));
            messageService.sendMessage(message);
        }
    }

    public void showBlockedUsers(Long adminChatId) throws TelegramApiException {
        List<User> blockedUsers = userService.findUsersByStatus(UserStatus.BLOCKED);
        if (blockedUsers.isEmpty()) {
            messageService.sendMessage(adminChatId, "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.");
            return;
        }

        for (User user : blockedUsers) {
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(adminChatId));
            message.setText("–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: " + user.getFirstName() + " " + user.getLastName());
            message.setReplyMarkup(AdminButtons.getBlockedUserButtons(user.getChatId()));
            messageService.sendMessage(message);
        }
    }

    public void handleDeleteUser(String callbackData, long chatId) {
        try {
            String userIdStr = callbackData.substring("DELETE_USER_".length());
            Long userId = Long.parseLong(userIdStr);
            checksForAccess.deleteUser(userId, chatId);
        } catch (NumberFormatException e) {
            messageService.sendMessage(chatId, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
            log.error("Error parsing user ID: ", e);
        }
    }
/*    public void handleDeleteUser(String callbackData, long chatId) {
        try {
            String userIdStr = callbackData.substring("DELETE_USER_".length());
            Long userId = Long.parseLong(userIdStr);
            Optional<User> userOptional = userService.findUserByChatId(userId);

            if (userOptional.isPresent()) {
                userService.deleteUser(userOptional.get());
                messageService.sendMessage(chatId, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ: " + userOptional.get().getFirstName() + " " + userOptional.get().getLastName());
            } else {
                messageService.sendMessage(chatId, "–ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.");
            }
        } catch (NumberFormatException e) {
            messageService.sendMessage(chatId, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
            log.error("Error parsing user ID: ", e);
        }
    }*/

}